# Unsorted
# GET http request that returns a list of all (first 2147483647) tasks stored in the database.
# Some variants to this endpoint are below
GET http://localhost:8443/task
Accept: application/json

###

# Sorted by description desc
GET http://localhost:8443/task?sort=description,desc
Accept: application/json

###

# Sorted by date created desc
GET http://localhost:8443/task?sort=createdAt,desc
Accept: application/json

###

# Sorted by date created asc
GET http://localhost:8443/task?sort=createdAt,asc
Accept: application/json

###

# Sorted by description asc
GET http://localhost:8443/task?sort=description,asc
Accept: application/json

###

# Sorted by completed desc
GET http://localhost:8443/task?sort=completed,desc
Accept: application/json

###

# Sorted by completed asc
GET http://localhost:8443/task?sort=completed,asc
Accept: application/json

###

# Sorted by priority desc
GET http://localhost:8443/task?sort=priority,desc
Accept: application/json

###

# Sorted by priority asc
GET http://localhost:8443/task?sort=priority,asc
Accept: application/json

###

# Sorted by completed asc, priority desc, description asc
# Note: It will show first tasks that are not completed, among those that are not completed, it will show first those
#       that have highest priority, and among those with same priority they'll be ordered alphabetically ascendently
#       "priosity desc" means "those with highest priority first"
GET http://localhost:8443/task?sort=completed,asc&sort=priority,desc&sort=description,asc
Accept: application/json

###

# Filter completed tasks
GET http://localhost:8443/task?filter=completed:true
Accept: application/json

###

# Filter by priority
GET http://localhost:8443/task?filter=priority:MEDIUM
Accept: application/json

###

# Filter by completed and priority
GET http://localhost:8443/task?filter=completed:false&filter=priority:HIGH
Accept: application/json

###

# Filter by priority using or
GET http://localhost:8443/task?filter=priority:HIGH&filter=priority:MEDIUM&filter=criteria:or
Accept: application/json

###

# Filter by priority (HIGH or MEDIUMT) and then sort (by priority desc -- higher priority on top, and by description ordered alphabetically)
GET http://localhost:8443/task?filter=priority:HIGH&filter=priority:MEDIUM&filter=criteria:or&sort=priority,desc&sort=description,asc
Accept: application/json

###
# GET http request that returns a specific task by its ID.
# Note: Returns OK, if there's a task with id 2 (2 can be replaced with any other id value). If there's no task with
#       the given id, it'll return 404. An example of that is the below request.
GET http://localhost:8443/task/2
Accept: application/json

###
# Not found
GET http://localhost:8443/task/-1
Accept: application/json

###
# POST http request that stores a new task in the database.
# Note: The only constraints implemented here is that "description" and "priority" must not be null.
#       There were no other constraints (like uniquness in the DB or the like) taken into account to implement this, in
#       order to keep it simple.
POST http://localhost:8443/task
Accept: application/json
Content-Type: application/json
Content-Encoding: UTF-8

{
  "description": "Lorem ipsum dolor sit amet, id vide bonorum eloquentiam duo. Officiis iracundia consetetur no per.",
  "completed": "false",
  "priority": "MEDIUM"
}

###
# PUT http request that updates a specific task by its ID.
# Note: Returns OK, if there's a task with id 2 (2 can be replaced with any other id value). If there's no task with
#       the given id, it'll return 404. An example of that is the below request.
PUT http://localhost:8443/task/2
Accept: application/json
Content-Type: application/json
Content-Encoding: UTF-8

{
  "description": "In facilis euripidis pri doe. Vis liber assueverit reprehendunt te, cotidieque persequeris in pri.",
  "completed": "true",
  "priority": "HIGH"
}

###
# Not found
PUT http://localhost:8443/task/-1
Accept: application/json
Content-Type: application/json
Content-Encoding: UTF-8

{
  "description": "",
  "completed": "true",
  "priority": "LOW"
}

###
# DELETE http request that deletes a task in the database.
# Note: Returns OK, if there's a task with id 1 (1 can be replaced with any other id value). If there's no task with
#       the given id, it'll return 404. An example of that is the below request.
DELETE http://localhost:8443/task/1

###
# Not found
DELETE http://localhost:8443/task/-1